{
  "configVersion": 1,
  "gltfExtensionName": "MOZ_hubs_components",
  "gltfExtensionVersion": 4,
  "types": {
    "MaterialItem": {
      "properties": {
        "value": {
          "type": "material"
        }
      }
    },
    "MaterialCollection": {
      "properties": {
        "value": {
          "type": "array",
          "arrayType": "MaterialItem"
        }
      }
    },
    "TaggedMaterial": {
      "properties": {
        "id": {
          "type": "string",
          "default": "$name"
        },
        "name": {
          "type": "string",
          "default": "$name"
        },
        "material": {
          "type": "material"
        }
      }
    },
    "SpawnerMediaOptions": {
      "properties": {
        "applyGravity": {
          "description": "Apply gravity to spawned object",
          "type": "bool",
          "default": false
        }
      }
    }
  },
  "components": {
    "fog": {
      "category": "Scene",
      "scene": true,
      "node": false,
      "properties": {
        "type": {
          "type": "enum",
          "description": "Fog Type",
          "items": [ 
            [ "linear", "Linear fog", "Fog effect will increase linearly with distance" ],
            [ "exponential", "Exponential fog", "Fog effect will increase exponentially with distance" ]
          ]
        },
        "color": { "type": "color", "default": "#ffffff" },
        "near": { "type": "float", "default": 1.0, "description": "Fog Near Distance (linear only)" },
        "far": { "type": "float", "default": 100.0, "description": "Fog Far Distance (linear only)" },
        "density": { "type": "float", "default": 0.1, "description": "Fog Density (exponential only)" }
      }
    },
    "audio-settings": {
      "category": "Scene",
      "scene": true,
      "node": false,
      "properties": {
        "avatarDistanceModel": {
          "type": "enum",
          "description": "Avatar Distance Model",
          "items": [ 
            [ "inverse", "Inverse drop off (inverse)", "Volume will decrease inversely with distance" ],
            [ "linear", "Linear drop off (linear)", "Volume will decrease linearly with distance" ],
            [ "exponential", "Exponential drop off (exponential)", "Volume will decrease expoentially with distance" ]
          ],
          "default": "inverse"
        },
        "avatarRolloffFactor": { "type": "float", "default": 5.0, "description": "Avatar Rolloff Factor" },
        "avatarRefDistance": { "type": "float", "default": 5.0, "unit": "LENGTH", "description": " Avatar Ref Distance" },
        "avatarMaxDistance": { "type": "float", "default": 10000.0, "unit": "LENGTH","description": "Avatar Max Distance" },
        "mediaVolume": { "type": "float", "default": 0.5, "description": "Media Volume" },
        "mediaDistanceModel": {
          "type": "enum",
          "description": "Media Distance Model",
          "items": [ 
            [ "inverse", "Inverse drop off (inverse)", "Volume will decrease inversely with distance" ],
            [ "linear", "Linear drop off (linear)", "Volume will decrease linearly with distance" ],
            [ "exponential", "Exponential drop off (exponential)", "Volume will decrease expoentially with distance" ]
          ],
          "default": "inverse"
        },
        "mediaRolloffFactor": { "type": "float", "default": 5.0, "description": "Media Rolloff Factor" },
        "mediaRefDistance": { "type": "float", "default": 5.0, "unit": "LENGTH","description": " Media Ref Distance" },
        "mediaMaxDistance": { "type": "float", "default": 10000.0, "unit": "LENGTH","description": "Media Max Distance" },
        "mediaConeInnerAngle": { "type": "float", "default": 360.0, "description": "Media Cone Inner Angle" },
        "mediaConeOuterAngle": { "type": "float", "default": 0.0, "description": "Media Cone Outer Angle" },
        "mediaConeOuterGain": { "type": "float", "default": 0.9, "description": "Media Cone Outer Gain" }
      }
    },
    "visible": {
      "category": "Scene",
      "node": true,
      "properties": {
        "visible": { "type": "bool", "default": true }
      }
    },
    "simple-water": {
      "category": "Elements",
      "node": true,
      "properties": {
        "color": { "type": "color"},
        "opacity": { "type": "float", "default": 1.0 },
        "tideHeight": { "type": "float", "default": 0.01 },
        "tideScale": { "type": "vec2", "default": [1.00, 1.00] },
        "tideSpeed": { "type": "vec2", "default": [0.50, 0.50] },
        "waveHeight": { "type": "float", "default": 1.0 },
        "waveScale": { "type": "vec2", "default": [1.00, 20.00] },
        "waveSpeed": { "type": "vec2", "default": [0.05, 6.00] },
        "ripplesSpeed": { "type": "float", "default": 0.25 },
        "ripplesScale": { "type": "float", "default": 1.0 }
      }
    },
    "directional-light": {
      "category": "Elements",
      "node": true,
      "properties": {
        "color": {"type": "color"},
        "intensity": {"type": "float", "default": 1.0},
        "castShadow": { "type": "bool", "default": false },
        "shadowMapResolution": {"type": "ivec2", "unit":"PIXEL", "default": [512, 512]},
        "shadowBias": {"type": "float", "default": 0.0},
        "shadowRadius": {"type": "float", "default": 1.0}
      }
    },
    "point-light": {
      "category": "Elements",
      "node": true,
      "properties": {
        "color": {"type": "color"},
        "intensity": {"type": "float", "default": 1.0},
        "range": {"type": "float", "default": 0.0},
        "decay": {"type": "float", "default": 2.0},
        "castShadow": { "type": "bool", "default": false },
        "shadowMapResolution": {"type": "ivec2", "unit":"PIXEL", "default": [512, 512]},
        "shadowBias": {"type": "float", "default": 0.0},
        "shadowRadius": {"type": "float", "default": 1.0}
      }
    },
    "spot-light": {
      "category": "Elements",
      "node": true,
      "properties": {
        "color": {"type": "color"},
        "intensity": {"type": "float", "default": 1.0},
        "range": {"type": "float", "default": 0.0},
        "decay": {"type": "float", "default": 2.0},
        "innerConeAngle": {"type": "float", "default": 0.0, "min": 0.0, "max": 1.57079632679, "subType":"ANGLE", "unit":"ROTATION"},
        "outerConeAngle": {"type": "float", "default": 0.78539816339, "min": 0.0005729577951408, "max": 1.57079632679, "subType":"ANGLE", "unit":"ROTATION"},
        "castShadow": { "type": "bool", "default": false },
        "shadowMapResolution": {"type": "ivec2", "unit":"PIXEL", "default": [512, 512]},
        "shadowBias": {"type": "float", "default": 0.0},
        "shadowRadius": {"type": "float", "default": 1.0}
      }
    },
    "ambient-light": {
      "category": "Elements",
      "node": true,
      "properties": {
        "color": {"type": "color"},
        "intensity": {"type": "float", "default": 1.0}
      }
    },
    "hemisphere-light": {
      "category": "Elements",
      "node": true,
      "properties": {
        "skyColor": {"type": "color"},
        "groundColor": {"type": "color"},
        "intensity": {"type": "float", "default": 1.0}
      }
    },
    "particle-emitter": {
      "node": true,
      "category": "Elements",
      "properties": {
        "src": {"type": "string", "default": ""},
        "startColor": {"type": "color"},
        "middleColor": {"type": "color"},
        "endColor": {"type": "color"},
        "startOpacity": {"type": "float", "default": 1.0},
        "middleOpacity": {"type": "float", "default": 1.0},
        "endOpacity": {"type": "float", "default": 1.0},
        "sizeCurve": {"type": "enum", "items":[
          ["linear" ,"linear", ""],
          ["quadraticIn" ,"quadraticIn", ""], ["quadraticOut" ,"quadraticOut", ""], ["quadraticInOut" ,"quadraticInOut", ""],
          ["cubicIn" ,"cubicIn", ""], ["cubicOut" ,"cubicOut", ""], ["cubicInOut" ,"cubicInOut", ""],
          ["quarticIn" ,"quarticIn", ""], ["quarticOut" ,"quarticOut", ""], ["quarticInOut" ,"quarticInOut", ""],
          ["quinticIn" ,"quinticIn", ""], ["quinticOut" ,"quinticOut", ""], ["quinticInOut" ,"quinticInOut", ""],
          ["sinusoidalIn" ,"sinusoidalIn", ""], ["sinusoidalOut" ,"sinusoidalOut", ""], ["sinusoidalInOut" ,"sinusoidalInOut", ""],
          ["exponentialIn" ,"exponentialIn", ""], ["exponentialOut" ,"exponentialOut", ""], ["exponentialInOut" ,"exponentialIn", ""],
          ["circularIn" ,"circularIn", ""], ["circularOut" ,"circularOut", ""], ["circularInOut" ,"circularInOut", ""],
          ["elasticIn" ,"elasticIn", ""], ["elasticOut" ,"elasticOut", ""], ["elasticInOut" ,"elasticInOut", ""],
          ["backIn" ,"backIn", ""], ["backOut" ,"backOut", ""], ["backInOut" ,"backInOut", ""],
          ["bounceIn" ,"bounceIn", ""], ["bounceOut" ,"bounceOut", ""], ["bounceInOut" ,"bounceInOut", ""]
        ], "default": "linear"},
        "colorCurve": {"type": "enum", "items":[
          ["linear" ,"linear", ""],
          ["quadraticIn" ,"quadraticIn", ""], ["quadraticOut" ,"quadraticOut", ""], ["quadraticInOut" ,"quadraticInOut", ""],
          ["cubicIn" ,"cubicIn", ""], ["cubicOut" ,"cubicOut", ""], ["cubicInOut" ,"cubicInOut", ""],
          ["quarticIn" ,"quarticIn", ""], ["quarticOut" ,"quarticOut", ""], ["quarticInOut" ,"quarticInOut", ""],
          ["quinticIn" ,"quinticIn", ""], ["quinticOut" ,"quinticOut", ""], ["quinticInOut" ,"quinticInOut", ""],
          ["sinusoidalIn" ,"sinusoidalIn", ""], ["sinusoidalOut" ,"sinusoidalOut", ""], ["sinusoidalInOut" ,"sinusoidalInOut", ""],
          ["exponentialIn" ,"exponentialIn", ""], ["exponentialOut" ,"exponentialOut", ""], ["exponentialInOut" ,"exponentialIn", ""],
          ["circularIn" ,"circularIn", ""], ["circularOut" ,"circularOut", ""], ["circularInOut" ,"circularInOut", ""],
          ["elasticIn" ,"elasticIn", ""], ["elasticOut" ,"elasticOut", ""], ["elasticInOut" ,"elasticInOut", ""],
          ["backIn" ,"backIn", ""], ["backOut" ,"backOut", ""], ["backInOut" ,"backInOut", ""],
          ["bounceIn" ,"bounceIn", ""], ["bounceOut" ,"bounceOut", ""], ["bounceInOut" ,"bounceInOut", ""]
        ], "default": "linear"},
        "startSize": {"type": "float", "default": 1.0},
        "endSize": {"type": "float", "default": 1.0},
        "sizeRandomness": {"type": "float"},
        "ageRandomness": {"type": "float"},
        "lifetime": {"type": "float", "default": 1.0, "subType":"TIME", "unit": "TIME"},
        "lifetimeRandomness": {"type": "float"},
        "particleCount": {"type": "int", "subType": "UNSIGNED", "default": 10},
        "startVelocity": {"type": "vec3", "subType":"XYZ", "unit":"VELOCITY", "default": {"x": 0.0, "y": 0.0, "z": 1.0}},
        "endVelocity": {"type": "vec3", "subType":"XYZ", "unit":"VELOCITY", "default": {"x": 0.0, "y": 0.0, "z": 1.0}},
        "velocityCurve": {"type": "enum", "items":[
          ["linear" ,"linear", ""],
          ["quadraticIn" ,"quadraticIn", ""], ["quadraticOut" ,"quadraticOut", ""], ["quadraticInOut" ,"quadraticInOut", ""],
          ["cubicIn" ,"cubicIn", ""], ["cubicOut" ,"cubicOut", ""], ["cubicInOut" ,"cubicInOut", ""],
          ["quarticIn" ,"quarticIn", ""], ["quarticOut" ,"quarticOut", ""], ["quarticInOut" ,"quarticInOut", ""],
          ["quinticIn" ,"quinticIn", ""], ["quinticOut" ,"quinticOut", ""], ["quinticInOut" ,"quinticInOut", ""],
          ["sinusoidalIn" ,"sinusoidalIn", ""], ["sinusoidalOut" ,"sinusoidalOut", ""], ["sinusoidalInOut" ,"sinusoidalInOut", ""],
          ["exponentialIn" ,"exponentialIn", ""], ["exponentialOut" ,"exponentialOut", ""], ["exponentialInOut" ,"exponentialIn", ""],
          ["circularIn" ,"circularIn", ""], ["circularOut" ,"circularOut", ""], ["circularInOut" ,"circularInOut", ""],
          ["elasticIn" ,"elasticIn", ""], ["elasticOut" ,"elasticOut", ""], ["elasticInOut" ,"elasticInOut", ""],
          ["backIn" ,"backIn", ""], ["backOut" ,"backOut", ""], ["backInOut" ,"backInOut", ""],
          ["bounceIn" ,"bounceIn", ""], ["bounceOut" ,"bounceOut", ""], ["bounceInOut" ,"bounceInOut", ""]
        ], "default": "linear"},
        "angularVelocity": {"type": "float", "unit": "VELOCITY"}
      }
    },
    "waypoint": {
      "category": "Elements",
      "node": true,
      "properties": {
        "canBeSpawnPoint": {"type": "bool", "default": false},
        "canBeOccupied": {"type": "bool", "default": false},
        "canBeClicked": {"type": "bool", "default": false},
        "willDisableMotion": {"type": "bool", "default": false},
        "willDisableTeleporting": {"type": "bool", "default": false},
        "snapToNavMesh": {"type": "bool", "default": false},
        "willMaintainInitialOrientation": {"type": "bool", "default": false},
        "willMaintainWorldUp": {"type": "bool", "default": true},
        "isOccupied": {"type": "bool", "default": false}
      }
    },
    "uv-scroll": {
      "category": "Animation",
      "node": true,
      "properties": {
        "speed": {"type": "vec2", "default": [0, 0]},
        "increment": {"type": "vec2", "default": [0, 0]}
      }
    },
    "personal-space-invader": {
      "category": "Avatar",
      "node": true,
      "properties": {
      "radius": { "type": "float", "default": 0.1 },
      "useMaterial": { "type": "bool", "default": false },
      "invadingOpacity": { "type": "float", "default": 0.3 }
      }
    },
    "link": {
      "category": "Elements",
      "node": true,
      "networked": true,
      "properties": {
        "href": {
          "type": "string",
          "description": "URL"
        }
      }
    },
    "image": {
      "category": "Elements",
      "node": true,
      "networked": true,
      "properties": {
        "src": {
          "type": "string",
          "description": "Image URL"
        },
        "controls": {
          "type": "bool", 
          "description": "Controls",
          "default": true
        },
        "alphaMode": {
          "type": "enum",
          "description": "Transparency Mode",
          "items": [ 
            [ "opaque", "No transparency (opaque)", "Alpha channel will be ignored" ],
            [ "blend", "Gradual transparency (blend)", "Alpha channel will be applied" ],
            [ "mask", "Binary transparency (mask)", "Alpha channel will be used as a threshold between opaque and transparent pixels" ]
          ]
        },
        "projection": {
          "type": "enum",
          "description": "Projection",
          "items": [ 
            [ "flat", "2D image (flat)", "Image will be shown on a 2D surface" ],
            [ "360-equirectangular", "Spherical (360-equirectangular)", "Image will be shown on a sphere" ]
          ]
        }
      }
    },
    "audio": {
      "category": "Elements",
      "node": true,
      "networked": true,
      "properties": {
        "src": {
          "type": "string",
          "description": "Audio URL"
        },
        "autoPlay": {
          "type": "bool", 
          "description": "Auto Play",
          "default": true
        },
        "controls": {
          "type": "bool", 
          "description": "Controls",
          "default": true
        },
        "loop": {
          "type": "bool", 
          "description": "Loop",
          "default": true
        }
      },
      "deps": ["audio-params"]
    },
    "video": {
      "category": "Elements",
      "node": true,
      "networked": true,
      "properties": {
        "src": {
          "type": "string",
          "description": "Video URL"
        },
        "projection": {
          "type": "enum",
          "description": "Projection",
          "items": [ 
            [ "flat", "2D image (flat)", "Image will be shown on a 2D surface" ],
            [ "360-equirectangular", "Spherical (360-equirectangular)", "Image will be shown on a sphere" ]
          ]
        },
        "autoPlay": {
          "type": "bool", 
          "description": "Auto Play",
          "default": true
        },
        "controls": {
          "type": "bool", 
          "description": "Controls",
          "default": true
        },
        "loop": {
          "type": "bool", 
          "description": "Loop",
          "default": true
        }
      },
      "deps": ["audio-params"]
    },
    "nav-mesh": {
      "category": "Scene",
      "node": true,
      "properties": {}
    },
    "kit": {
      "category": "Architecture Kit",
      "scene": true,
      "node": false,
      "properties": {
        "authorName": {
          "type": "string"
        },
        "authorUrl": {
          "type": "string"
        },
        "license": {
          "type": "string"
        }
      }
    },
    "kit-piece": {
      "category": "Architecture Kit",
      "properties": {
        "id": {
          "type": "string",
          "default": "$name"
        },
        "name": {
          "type": "string",
          "default": "$name"
        },
        "tags": {
          "type": "collections",
          "collectionPrefix": "KIT_"
        }
      }
    },
    "kit-alt-materials": {
      "category": "Architecture Kit",
      "node": true,
      "properties": {
        "id": {
          "type": "string",
          "default": "$name"
        },
        "name": {
          "type": "string",
          "default": "$name"
        },
        "defaultMaterials": {
          "type": "array",
          "arrayType": "TaggedMaterial"
        },
        "altMaterials": {
          "type": "array",
          "arrayType": "MaterialCollection"
        }
      }
    },
    "material-id": {
      "category": "Architecture Kit",
      "node": false,
      "scene": false,
      "material": true,
      "properties": {
        "id": {
          "type": "string",
          "default": "$name"
        },
        "name": {
          "type": "string",
          "default": "$name"
        }
      }
    },
    "loop-animation": {
      "category": "Animation",
      "node": true,
      "properties": {
        "clip": {
          "type": "string"
        },
        "paused": {
          "type": "bool",
          "default": false
        }
      }
    },
    "scale-audio-feedback": {
      "category": "Avatar",
      "node": true,
      "properties": {
        "minScale": {
          "type": "float",
          "default": 1.0
        },
        "maxScale": {
          "type": "float",
          "default": 1.5
        }
      }
    },
    "morph-audio-feedback": {
      "category": "Avatar",
      "node": true,
      "properties": {
        "name": {
          "type": "string"
        },
        "minValue": {
          "type": "float",
          "default": 0.0
        },
        "maxValue": {
          "type": "float",
          "default": 1.0
        }
      }
    },
    "video-texture-target": {
      "category": "Avatar",
      "node": false,
      "scene": false,
      "material": true,
      "properties": {
        "targetBaseColorMap": {
          "description": "Should the video texture override the base color map?",
          "type": "bool",
          "default": true
        },
        "targetEmissiveMap": {
          "description": "Should the video texture override the emissive map?",
          "type": "bool",
          "default": false
        },
        "srcNode": {
          "label": "Source",
          "description": "Node with a vide-texture-source to pull video from",
          "type": "nodeRef",
          "hasComponents": ["video-texture-source"]
        }
      }
    },
    "billboard": {
      "category": "Elements",
      "node": true,
      "properties": {
        "onlyY": {
          "type": "bool",
          "default": false
        }
      }
    },
    "video-texture-source": {
      "category": "Scene",
      "node": true,
      "properties": {
        "resolution": {"type": "ivec2", "unit":"PIXEL", "default": [1280, 720]},
        "fps": {"type": "int", "default": 15}
      }
    },
    "text": {
      "category": "Elements",
      "node": true,
      "properties": {
        "value": {
          "type": "string",
          "label": "Text",
          "description": "The string of text to be rendered. Newlines and repeating whitespace characters are honored."
        },

        "fontSize": {
          "type": "float",
          "label": "Font Size",
          "description": "Font size, in local meters.",
          "unit": "LENGTH",
          "default": 0.075
        },

        "textAlign": {
          "type": "enum",
          "description": "The horizontal alignment of each line of text within the overall text bounding box.",
          "items": [
            [ "left", "Left", "Text will be aligned to the left" ],
            [ "center", "Center", "Text will be centered" ],
            [ "right", "Right", "Text will be aligned to the right" ],
            [ "justify", "Justify", "Text will be justified" ]
          ]
        },
        "anchorX": {
          "type": "enum",
          "description": "Defines the horizontal position in the text block that should line up with the local origin.",
          "items": [
            [ "left", "Left", "Left side of the text will be at the pivot point of this object." ],
            [ "center", "Center", "Center of the text will be at the pivot point of this object." ],
            [ "right", "Right", "Right side of the text will be at the pivot point of this object." ]
          ],
          "default": "center"
        },
        "anchorY": {
          "type": "enum",
          "description": "Defines the vertical position in the text block that should line up with the local origin.",
          "items": [
            [ "top", "Top", "Top of the text will be at the pivot point of this object." ],
            [ "top-baseline", "Top Baseline", "Top baseline of the text will be at the pivot point of this object." ],
            [ "middle", "Middle", "Middle of the text will be at the pivot point of this object." ],
            [ "bottom-baseline", "Bottom Baseline", "Bottom baseline of the text will be at the pivot point of this object." ],
            [ "bottom", "Bottom", "Bottom of the text will be at the pivot point of this object." ]
          ],
          "default": "middle"
        },

        "color": {
          "type": "color",
          "label": "Color",
          "default": [ 1.0, 1.0, 1.0, 1.0 ]
        },

        "letterSpacing": {
          "type": "float",
          "label": "Letter Spacing",
          "description": "Sets a uniform adjustment to spacing between letters after kerning is applied, in local meters. Positive numbers increase spacing and negative numbers decrease it.",
          "unit": "LENGTH",
          "default": 0.0
        },
        "lineHeight": {
          "type": "float",
          "label": "Line Height",
          "description": "Sets the height of each line of text. If 0, a reasonable height based on the chosen font's ascender/descender metrics will be used, otherwise it is interpreted as a multiple of the fontSize.",
          "default": 0.0
        },

        "outlineWidth": {
          "type": "string",
          "label": "Outline Width",
          "description": "The width of an outline/halo to be drawn around each text glyph using the outlineColor and outlineOpacity. This can help improve readability when the text is displayed against a background of low or varying contrast.\n\n The width can be specified as either an absolute number in local units, or as a percentage string e.g. \"10%\" which is interpreted as a percentage of the fontSize.",
          "default": "0"
        },
        "outlineColor": {
          "type": "color",
          "label": "Outline Color",
          "description": "The color to use for the text outline when outlineWidth, outlineBlur, and/or outlineOffsetX/Y are set.",
          "default": [ 0.0, 0.0, 0.0, 1.0]
        },
        "outlineBlur": {
          "type": "string",
          "label": "Outline Blur",
          "description": "Specifies a blur radius applied to the outer edge of the text's outlineWidth. If the outlineWidth is zero, the blur will be applied at the glyph edge, like CSS's text-shadow blur radius. A blur plus a nonzero outlineWidth can give a solid outline with a fuzzy outer edge.\n\nThe blur radius can be specified as either an absolute number in local meters, or as a percentage string e.g. \"12%\" which is treated as a percentage of the fontSize.",
          "default": "0"
        },
        "outlineOffsetX": {
          "type": "string",
          "label": "Outline X Offset",
          "description": "This defines a horizontal offset of the text outline. Using an offset with outlineWidth: 0 creates a drop-shadow effect like CSS's text-shadow; also see outlineBlur.\n\n The offsets can be specified as either an absolute number in local units, or as a percentage string e.g. \"12%\" which is treated as a percentage of the fontSize.",
          "default": "0"
        },
        "outlineOffsetY": {
          "type": "string",
          "label": "Outline Y Offset",
          "description": "This defines a vertical offset of the text outline. Using an offset with outlineWidth: 0 creates a drop-shadow effect like CSS's text-shadow; also see outlineBlur.\n\n The offsets can be specified as either an absolute number in local units, or as a percentage string e.g. \"12%\" which is treated as a percentage of the fontSize.",
          "default": "0"
        },
        "outlineOpacity": {
          "type": "float",
          "label": "Outline Opacity",
          "description": "Sets the opacity of a configured text outline, in the range 0 to 1",
          "default": 1.0,
          "min": 0.0,
          "max": 1.0
        },

        "fillOpacity": {
          "type": "float",
          "label": "Fill Opacity",
          "description": "Controls the opacity of just the glyph's fill area, separate from any configured strokeOpacity, outlineOpacity, and the material's opacity. A fillOpacity of 0 will make the fill invisible, leaving just the stroke and/or outline.",
          "default": 1.0
        },

        "strokeWidth": {
          "type": "string",
          "label": "Stroke Width",
          "description": "Sets the width of a stroke drawn inside the edge of each text glyph, using the strokeColor and strokeOpacity.\n\n The width can be specified as either an absolute number in local units, or as a percentage string e.g. \"10%\" which is interpreted as a percentage of the fontSize.",
          "default": "0"
        },
        "strokeColor": {
          "type": "color",
          "label": "Stroke Color",
          "description": "The color of the text stroke, when strokeWidth is nonzero.",
          "default": [ 0.0, 0.0, 0.0, 1.0]
        },
        "strokeOpacity": {
          "type": "float",
          "label": "Stroke Opacity",
          "description": "The opacity of the text stroke, when strokeWidth is nonzero.",
          "default": 1.0,
          "min": 0.0,
          "max": 1.0
        },

        "textIndent": {
          "type": "float",
          "label": "Text Indent",
          "description": "An indentation applied to the first character of each hard newline. Behaves like CSS text-indent.",
          "default": 0.0
        },

        "whiteSpace": {
          "type": "enum",
          "label": "Wrapping",
          "description": "Defines whether text should wrap when a line reaches the maxWidth.",
          "items": [
            [ "normal", "Normal", "Allow wrapping according to the 'wrapping mode'." ],
            [ "nowrap", "No Wrapping", "Prevent wrapping." ]
          ]
        },
        "overflowWrap": {
          "type": "enum",
          "label": "Wrapping Mode",
          "description": "Defines how text wraps if the whiteSpace property is 'normal'.",
          "items": [
            [ "normal", "Normal", "Break only at whitespace characters." ],
            [ "break-word", "Break Word", "Allow breaking within words." ]
          ]
        },

        "opacity": {
          "type": "float",
          "label": "Opacity",
          "description": "The opacity of the entire text object.",
          "default": 1.0,
          "min": 0.0,
          "max": 1.0
        },
        "side": {
          "type": "enum",
          "description": "Display Side",
          "items": [
            [ "front", "Show on front", "Text will be shown on the front (-Y)" ],
            [ "back", "Show on back", "Text will be shown on the back (+Y)" ],
            [ "double", "Show on both", "Text will be shown on both sides" ]
          ]
        },

        "maxWidth": {
          "type": "float",
          "label": "Max Width",
          "description": "The maximum width of the text block, above which text may start wrapping according to the whiteSpace and overflowWrap properties.",
          "unit": "LENGTH",
          "default": Infinity
        },
        "curveRadius": {
          "type": "float",
          "label": "Curve Radius",
          "description": "Defines a cylindrical radius along which the text's plane will be curved. Positive numbers put the cylinder's centerline (oriented vertically) that distance in front of the text, for a concave curvature, while negative numbers put it behind the text for a convex curvature. The centerline will be aligned with the text's local origin; you can use anchorX to offset it.",
          "unit": "LENGTH",
          "default": 0.0
        },
        "direction": {
          "type": "enum",
          "description": "Sets the base direction for the text.",
          "items": [
            [ "auto", "Auto", "Use the default text direction defined by the system and font." ],
            [ "ltr", "Left to Right", "Order text left to right." ],
            [ "rtl", "Right to Left", "Order text right to left." ]
          ]
        }
      }
    },
    "ammo-shape":{
      "category": "Scene",
      "node": true,
      "properties": {
        "type": {
          "type": "enum",
          "description": "Avatar Distance Model",
          "items": [
            [ "box", "Box Collider", "A box-shaped primitive collision shape"],
            [ "sphere", "Sphere Collider", "A primitive collision shape which is represents a sphere" ],
            [ "hull", "Convex Hull", "A convex hull wrapped around the objects vertecies. A good analogy for a convex hull is an elastic membrane or balloon under pressure which is placed around a given set of vertices. When released the membrane will assume the shape of the convex hull." ],
            [ "mesh", "Mesh Collider", "A shape made of the actual vertecies of the object. This can be expensive for large meshes." ]
          ],
          "default": "hull"
        },
        "fit": {
          "type": "enum",
          "description": "Shape fitting mode",
          "items": [
            [ "all", "Automatic fit all", "Automatically match the shape to fit the object's vertecies"],
            [ "manual", "Manual fit", "Use the manually specified dimensions to define the shape, ignoring the object's vertecies" ]
          ],
          "default": "all"
        },
        "halfExtents": {
          "type": "vec3",
          "description": "Half dimensions of the collider. (Only used when fit is set to \"manual\" and type is set ot \"box\")",
          "unit":"LENGTH",
          "subType":"XYZ_LENGTH",
          "default": [ 0.5,  0.5,  0.5 ]
        },
        "minHalfExtent": {
          "type": "float",
          "description": "The minimum size to use when automatically generating half extents. (Only used when fit is set to \"all\" and type is set ot \"box\")",
          "unit": "LENGTH",
          "default": 0.0
        },
        "maxHalfExtent": {
          "type": "float",
          "description": "The maximum size to use when automatically generating half extents. (Only used when fit is set to \"all\" and type is set ot \"box\")",
          "unit": "LENGTH",
          "default": 1000.0
        },
        "sphereRadius": {
          "type": "float",
          "description": "Radius of the sphere collider. (Only used when fit is set to \"manual\" and type is set ot \"sphere\")",
          "unit": "LENGTH",
          "default": 0.5
        },
        "offset": {
          "type": "vec3",
          "description": "An offset to apply to the collider relative to the object's origin.",
          "subType":"XYZ",
          "default": [ 0.0, 0.0,  0.0 ]
        },
        "includeInvisible": {
          "type": "bool",
          "description": "Include invisible objects when generating a collider. (Only used if \"fit\" is set to \"all\")",
          "default": false
        }
      }
    },
    "media-frame": {
      "category": "Elements",
      "node": true,
      "networked": true,
      "properties": {
        "bounds": {
          "type": "vec3",
          "description": "Bounding box to fit objects into when they are snapped into the media frame.",
          "unit":"LENGTH",
          "subType":"XYZ_LENGTH",
          "default": [ 1.0,  1.0,  1.0 ]
        },
        "mediaType": {
          "type": "enum",
          "description": "Limit what type of media this frame will capture",
          "items": [
            [ "all", "All Media", "Allow any type of media."],
            [ "all-2d", "Only 2D Media", "Allow only Images, Videos, and PDFs." ],
            [ "model", "Only 3D Models", "Allow only 3D models." ],
            [ "image", "Only Images", "Allow only images." ],
            [ "video", "Only Videos", "Allow only videos." ],
            [ "pdf", "Only PDFs", "Allow only PDFs." ]
          ],
          "default": "all-2d"
        },
        "snapToCenter": {
          "type": "bool",
          "description": "Snap the media to the center of the media frame when capturing. If set to false the object will just remain in the place it was dorpped but still be considered \"captured\" by the media frame.",
          "default": true
        }
      }
    },
    "skybox": {
      "category": "Scene",
      "node": true,
      "properties": {
        "azimuth": {
          "type": "float",
          "label": "Time of Day",
          "default": 0.15
        },
        "inclination": {
          "type": "float",
          "label": "Latitude",
          "default": 0.0
        },
        "luminance": {
          "type": "float",
          "label": "Luminance",
          "default": 1.0
        },
        "mieCoefficient": {
          "type": "float",
          "label": "Scattering Amount",
          "default": 0.005
        },
        "mieDirectionalG": {
          "type": "float",
          "label": "Scattering Distance",
          "default": 0.8
        },
        "turbidity": {
          "type": "float",
          "label": "Horizon Start",
          "default": 10.0
        },
        "rayleigh": {
          "type": "float",
          "label": "Horizon End",
          "default": 2.0
        },
        "distance": {
          "type": "float",
          "label": "Distance",
          "default": 8000.0
        }
      }
    },
    "spawner": {
      "category": "Elements",
      "node": true,
      "properties": {
        "src": { "type": "string" },
        "mediaOptions": { "type": "SpawnerMediaOptions" }
      }
    },
    "audio-target": {
      "category": "Elements",
      "node": true,
      "properties": {
        "srcNode": {
          "label": "Source",
          "description": "Node with a audio-source-zone to pull audio from",
          "type": "nodeRef",
          "hasComponents": ["zone-audio-source"]
        },
        "minDelay": {
          "type": "float",
          "description": "Minumum random delay applied to the source audio",
          "default": 0.01
        },
        "maxDelay": {
          "type": "float",
          "description": "Maxumum random delay applied to the source audio",
          "default": 0.03
        },
        "debug": {
          "description": "Show debug visuals.",
          "type": "bool",
          "default": false
        }
      },
      "deps": ["audio-params"]
    },
    "zone-audio-source": {
      "category": "Elements",
      "node": true,
      "properties": {
        "onlyMods": {
          "description": "Only room moderators should be able to transmit audio from this source.",
          "type": "bool",
          "default": true
        },
        "muteSelf": {
          "description": "Do not transmit your own audio to audio targets.",
          "type": "bool",
          "default": true
        },
        "debug": {
          "description": "Play white noise when no audio source is in the zone.",
          "type": "bool",
          "default": false
        }
      }
    },
    "audio-params": {
      "category": "Elements",
      "node": true,
      "properties": {
        "audioType": {
          "type": "enum",
          "description": "Audio Type",
          "items": [ 
            [ "pannernode", "Positional audio (pannernode)", "Volume will change depending on the listener's position relative to the source" ],
            [ "stereo", "Background audio (stereo)", "Volume will be independent of the listener's position" ]
          ]
        },
        "gain": {
          "type": "float",
          "description": "How much to amplify the source audio by",
          "default": 1.0
        },
        "distanceModel": {
          "type": "enum",
          "description": "Distance Model",
          "items": [
            [ "inverse", "Inverse", "Volume will decrease inversely with distance" ],
            [ "linear", "Linear", "Volume will decrease linearly with distance" ],
            [ "exponential", "Exponential", "Volume will decrease expoentially with distance" ]
          ],
          "default": "inverse"
        },
        "refDistance": {
          "type": "float",
          "subType":"DISTANCE",
          "description": "A double value representing the reference distance for reducing volume as the audio source moves further from the listener. For distances greater than this the volume will be reduced based on rolloffFactor and distanceModel.",
          "unit": "LENGTH",
          "default": 5.0
        },
        "rolloffFactor": {
          "type": "float",
          "description": "A double value describing how quickly the volume is reduced as the source moves away from the listener. This value is used by all distance models.",
          "default": 5.0
        },
        "maxDistance": {
          "type": "float",
          "subType":"DISTANCE",
          "description": "A double value representing the maximum distance between the audio source and the listener, after which the volume is not reduced any further. This value is used only by the linear distance model.",
          "unit": "LENGTH",
          "default": 10000.0
        },
        "coneInnerAngle": {
          "type": "float",
          "description": "A double value describing the angle, in degrees, of a cone inside of which there will be no volume reduction.",
          "default": 360.0
        },
        "coneOuterAngle": {
          "type": "float",
          "description": "A double value describing the angle, in degrees, of a cone outside of which the volume will be reduced by a constant value, defined by the coneOuterGain attribute.",
          "default": 0.0
        },
        "coneOuterGain": {
          "type": "float",
          "description": "A double value describing the amount of volume reduction outside the cone defined by the coneOuterAngle attribute.",
          "default": 0.9
        }
      }
    },
    "audio-zone": {
      "category": "Elements",
      "node": true,
      "networked": true,
      "properties": {
        "inOut": {
          "type": "bool",
          "description": "The zone audio parameters affect the sources inside the zone when the listener is outside",
          "default": true
        },
        "outIn": {
          "type": "bool",
          "description": "The zone audio parameters affect the sources outside the zone when the listener is inside",
          "default": true
        }
      },
      "deps": ["audio-params"]
    },
    "shadow": {
      "category": "Elements",
      "node": true,
      "properties": {
        "cast": { "type": "bool", "default": true },
        "receive": { "type": "bool", "default": true }
      }
    },
    "environment-settings": {
      "category": "Scene",
      "node": false,
      "scene": true,
      "properties": {
        "toneMapping": {
          "type": "enum",
          "description": "Tone Mapping",
          "items": [
            [ "NoToneMapping", "None", "No tone mapping." ],
            [ "LinearToneMapping", "Linear", "Linear tone mapping" ],
            [ "ReinhardToneMapping", "ThreeJS 'Reinhard'", "ThreeJS 'Reinhard' tone mapping" ],
            [ "CineonToneMapping", "ThreeJS 'Cineon'", "ThreeJS 'Cineon' tone mapping" ],
            [ "ACESFilmicToneMapping", "ThreeJS 'ACES Filmic'", "ThreeJS 'ACES Filmic' tone mapping" ],
            [ "LUTToneMapping", "Blender 'Filmic'", "Match Blender's Filmic tone mapping" ]
          ],
          "default": "LUTToneMapping"
        },
        "toneMappingExposure": {
          "label": "Exposure",
          "type": "float",
          "description": "Exposure level of tone mapping",
          "default": 1.0
        },
        "backgroundColor": { "type": "color", "default": "#aaaaaa" },
        "backgroundTexture": {
          "type": "texture",
          "label": "Background Image",
          "description": "An equirectangular image to use as the scene background"
        },
        "envMapTexture": {
          "type": "texture",
          "label": "EnvMap",
          "description": "An equirectangular image to use as the default environment map for all objects"
        }
      }
    },
    "frustrum": {
      "category": "Elements",
      "node": true,
      "properties": {
        "culled": { "type": "bool", "default": true, "description": "Ignore entities outside of the camera frustrum. Frustrum culling can cause problems with some animations" }
      }
    },
    "model": {
      "category": "Elements",
      "node": true,
      "networked": true,
      "properties": {
        "src": {
          "type": "string",
          "description": "Model URL"
        }
      }
    }
  }
}
